{
  "info": {
    "_postman_id": "494f585a-2cfd-40ea-b2ef-f0e8329bda16",
    "name": "Note api",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "5701292"
  },
  "item": [
    {
      "name": "get notes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb25lQHNwZWVyLmNvbSIsImlhdCI6MTcyMDk3ODcwOCwiZXhwIjoxNzIxMDY1MTA4fQ.t_yUOeH_CixSEMvLmB6924GP8zJsOJ5JuopDjXnjh64",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/notes",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "notes"
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "search notes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb25lQHNwZWVyLmNvbSIsImlhdCI6MTcyMDk3ODcwOCwiZXhwIjoxNzIxMDY1MTA4fQ.t_yUOeH_CixSEMvLmB6924GP8zJsOJ5JuopDjXnjh64",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/search?search=book",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "search"
          ],
          "query": [
            {
              "key": "search",
              "value": "book"
            }
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "get note by id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb25lQHNwZWVyLmNvbSIsImlhdCI6MTcyMDk3ODcwOCwiZXhwIjoxNzIxMDY1MTA4fQ.t_yUOeH_CixSEMvLmB6924GP8zJsOJ5JuopDjXnjh64",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/notes/3",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "notes",
            "3"
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "create note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb25lQHNwZWVyLmNvbSIsImlhdCI6MTcyMDgyOTQ2NCwiZXhwIjoxNzIwOTE1ODY0fQ.hzxoMkektJb0Jb_IbQ1Ip2D8_SPy6tLIZM8dE__zo_Q",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n\t\"title\": \"novel notes\",\n    \"content\":\"novel books\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/notes",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "notes"
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "share note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb25lQHNwZWVyLmNvbSIsImlhdCI6MTcyMDgyOTQ2NCwiZXhwIjoxNzIwOTE1ODY0fQ.hzxoMkektJb0Jb_IbQ1Ip2D8_SPy6tLIZM8dE__zo_Q",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n\t\"title\": \"novel notes\",\n    \"content\":\"novel books\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/notes",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "notes"
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "update note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful PUT request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb25lQHNwZWVyLmNvbSIsImlhdCI6MTcyMDk3ODcwOCwiZXhwIjoxNzIxMDY1MTA4fQ.t_yUOeH_CixSEMvLmB6924GP8zJsOJ5JuopDjXnjh64",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"id\": 3,\n\t\"title\": \"magzine notes\",\n    \"content\": \"magzine report\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/notes",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "notes"
          ]
        },
        "description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
      },
      "response": []
    },
    {
      "name": "delete note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful DELETE request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/notes/3",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "notes",
            "3"
          ]
        },
        "description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
      },
      "response": []
    },
    {
      "name": "get user by id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful PUT request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtaWtlQHNwZWVyLmNvbSIsImlhdCI6MTcyMDk3OTE3MiwiZXhwIjoxNzIxMDY1NTcyfQ.Nashha6D6sWW7GWKhBDtDMAAOJD-mbzPf6vtzGWp3eQ",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/users/2",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "users",
            "2"
          ]
        },
        "description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
      },
      "response": []
    },
    {
      "name": "signup",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"fullName\": \"Jone\",\n\t\"email\":\"jone@speer.com\",\n    \"password\": \"111111\",\n    \"repeatPassword\": \"111111\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/auth/signup",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "auth",
            "signup"
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful PUT request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n\t\"email\":\"mike@speer.com\",\n    \"password\": \"123456\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{BASE_URL}}:{{PORT}}/api/auth/login",
          "protocol": "http",
          "host": [
            "{{BASE_URL}}"
          ],
          "port": "{{PORT}}",
          "path": [
            "api",
            "auth",
            "login"
          ]
        },
        "description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
      },
      "response": []
    }
  ]
}